// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MongoUserDefinitionInitParameters struct {

	// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta2.MongoDatabase
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	CosmosMongoDatabaseID *string `json:"cosmosMongoDatabaseId,omitempty" tf:"cosmos_mongo_database_id,omitempty"`

	// Reference to a MongoDatabase in cosmosdb to populate cosmosMongoDatabaseId.
	// +kubebuilder:validation:Optional
	CosmosMongoDatabaseIDRef *v1.Reference `json:"cosmosMongoDatabaseIdRef,omitempty" tf:"-"`

	// Selector for a MongoDatabase in cosmosdb to populate cosmosMongoDatabaseId.
	// +kubebuilder:validation:Optional
	CosmosMongoDatabaseIDSelector *v1.Selector `json:"cosmosMongoDatabaseIdSelector,omitempty" tf:"-"`

	// A list of Mongo Roles that are inherited to the Mongo User Definition.
	InheritedRoleNames []*string `json:"inheritedRoleNames,omitempty" tf:"inherited_role_names,omitempty"`

	// The password for the Mongo User Definition.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

type MongoUserDefinitionObservation struct {

	// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
	CosmosMongoDatabaseID *string `json:"cosmosMongoDatabaseId,omitempty" tf:"cosmos_mongo_database_id,omitempty"`

	// The ID of the Cosmos DB Mongo User Definition.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of Mongo Roles that are inherited to the Mongo User Definition.
	InheritedRoleNames []*string `json:"inheritedRoleNames,omitempty" tf:"inherited_role_names,omitempty"`
}

type MongoUserDefinitionParameters struct {

	// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta2.MongoDatabase
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CosmosMongoDatabaseID *string `json:"cosmosMongoDatabaseId,omitempty" tf:"cosmos_mongo_database_id,omitempty"`

	// Reference to a MongoDatabase in cosmosdb to populate cosmosMongoDatabaseId.
	// +kubebuilder:validation:Optional
	CosmosMongoDatabaseIDRef *v1.Reference `json:"cosmosMongoDatabaseIdRef,omitempty" tf:"-"`

	// Selector for a MongoDatabase in cosmosdb to populate cosmosMongoDatabaseId.
	// +kubebuilder:validation:Optional
	CosmosMongoDatabaseIDSelector *v1.Selector `json:"cosmosMongoDatabaseIdSelector,omitempty" tf:"-"`

	// A list of Mongo Roles that are inherited to the Mongo User Definition.
	// +kubebuilder:validation:Optional
	InheritedRoleNames []*string `json:"inheritedRoleNames,omitempty" tf:"inherited_role_names,omitempty"`

	// The password for the Mongo User Definition.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`
}

// MongoUserDefinitionSpec defines the desired state of MongoUserDefinition
type MongoUserDefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MongoUserDefinitionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MongoUserDefinitionInitParameters `json:"initProvider,omitempty"`
}

// MongoUserDefinitionStatus defines the observed state of MongoUserDefinition.
type MongoUserDefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MongoUserDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MongoUserDefinition is the Schema for the MongoUserDefinitions API. Manages a Cosmos DB Mongo User Definition.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MongoUserDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   MongoUserDefinitionSpec   `json:"spec"`
	Status MongoUserDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MongoUserDefinitionList contains a list of MongoUserDefinitions
type MongoUserDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongoUserDefinition `json:"items"`
}

// Repository type metadata.
var (
	MongoUserDefinition_Kind             = "MongoUserDefinition"
	MongoUserDefinition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MongoUserDefinition_Kind}.String()
	MongoUserDefinition_KindAPIVersion   = MongoUserDefinition_Kind + "." + CRDGroupVersion.String()
	MongoUserDefinition_GroupVersionKind = CRDGroupVersion.WithKind(MongoUserDefinition_Kind)
)

func init() {
	SchemeBuilder.Register(&MongoUserDefinition{}, &MongoUserDefinitionList{})
}
